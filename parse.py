import requests
from bs4 import BeautifulSoup

URL = 'https://college.ks.ua/#'
HEADER = {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:81.0) Gecko/20100101 Firefox/81.0',
          'accept': '*/*'}

dict_weak = {
    1: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
    2: '–í—ñ–≤—Ç–æ—Ä–æ–∫',
    3: '–°–µ—Ä–µ–¥–∞',
    4: '–ß–µ—Ç–≤–µ—Ä',
    5: "–ü'—è—Ç–Ω–∏—Ü—è"
}

stick_num = {
    '1': '1Ô∏è‚É£',
    '2': '2Ô∏è‚É£',
    '3': '3Ô∏è‚É£',
    '4': '4Ô∏è‚É£',
    '5': '5Ô∏è‚É£',
    '6': '6Ô∏è‚É£',
    '7': '7Ô∏è‚É£',
    '8': '8Ô∏è‚É£',
}


def parse():
    html = get_html(URL)
    if html.status_code == 200:
        return get_content(html.text)
    else:
        return None


def get_html(url, params=None):
    r = requests.get(url, headers=HEADER, params=params)
    return r


def get_content(html):
    soup = BeautifulSoup(html, 'html.parser')
    return soup.find_all('div', class_='shedule_content')


def clean(text):
    return ' '.join(text.split())


def get_timetables(group, dayofweak):
    items = parse()
    if items:
        column_num = None
        txt_msg = f'üî∏*{dict_weak[dayofweak]}*üî∏\n'
        one = False
        before = True
        for item in items:
            if not '–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å' in item.find('p', class_='shedule_content__title').text:
                continue
            elif '–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å' in item.find('p', class_='shedule_content__title').text and one == True:
                continue
            table = item.find('tbody')
            rows = table.find_all('tr')
            for row in rows:
                columns = row.find_all('td')
                if group == columns[2].text.strip():
                    column_num = 2
                elif group == columns[5].text.strip():
                    column_num = 5
                elif column_num == 2:
                    if not dict_weak[dayofweak] in columns[0].text.strip() and before:
                        continue
                    if dict_weak[dayofweak] in columns[0].text.strip():
                        if columns[1].text.split():
                            txt_msg += f'{stick_num[columns[1].text.strip()]} ' \
                                       f'*{clean(columns[2].text)}* ' \
                                       f'_{clean(columns[3].text)}_\n'
                            before = False
                    else:
                        try:
                            int(columns[0].text.strip())
                            txt_msg += f'{stick_num[columns[0].text.strip()]} ' \
                                       f'*{clean(columns[1].text)}* ' \
                                       f'_{clean(columns[2].text)}_\n'
                        except Exception:
                            break
                elif column_num == 5:
                    if not dict_weak[dayofweak] in columns[0].text.strip() and before:
                        continue
                    if dict_weak[dayofweak] in columns[0].text.strip():
                        if columns[5].text.split():
                            txt_msg += f'{stick_num[columns[4].text.strip()]} ' \
                                       f'*{clean(columns[5].text)}* ' \
                                       f'_{clean(columns[6].text)}_\n'
                        before = False
                    else:
                        try:
                            int(columns[0].text.strip())
                            txt_msg += f'{stick_num[columns[3].text.strip()]} ' \
                                       f'*{clean(columns[4].text)}* ' \
                                       f'_{clean(columns[5].text)}_\n'
                        except Exception:
                            break
                else:
                    continue
        if txt_msg:
            return txt_msg
        else:
            return None
    else:
        return 'error1'


def get_replacements(message):
    items = parse()
    if items:
        num_ = 0
        txt_msg = ''
        for item in items:
            if '–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å' in item.find('p', class_='shedule_content__title').text:
                continue
            if num_ < 2:
                txt_msg += get_zblock(item, message)
                num_ = num_ + 1
            else:
                break
        return txt_msg
    else:
        return 'Error'


def get_zblock(block, message):
    day_title = block.find('p', class_='shedule_content__title').text
    table = block.find('tbody')
    lines = table.find_all('tr')
    txt_msg = f'*{day_title}*' + '\n'
    par = True
    z_par = ''
    z_aud = ''
    for line in lines:
        columns = line.find_all('td')
        if par:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ—á–∫—É
            if columns[0].text.strip() == '–ì—Ä.':
                continue
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–º–µ–Ω–∞—Ö –ø–∞—Ä
            elif str(message) in columns[0].text.strip() or \
                    str(message) in columns[2].text.strip() or \
                    str(message) in columns[3].text.strip():
                z_par += f'{stick_num[columns[1].text.strip()]} –ø–∞—Ä–∞ ' \
                         f'{columns[0].text.strip()} –≥—Ä—É–ø–∞ ' \
                         f'{columns[2].text.strip()} –Ω–∞ ' \
                         f'*{columns[3].text.strip()}*'
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–æ–ø–∏—Å—ã–≤–∞–µ–º
                if columns[4].text.strip():
                    z_par += f' –≤ _{columns[4].text.strip()}_\n'
                else:
                    z_par += '\n'
            # –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤ –≤ –∑–∞–º–µ–Ω–∞—Ö –ø–∞—Ä
            elif columns[2].text.strip() == '':
                continue
            # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∞ –∑–∞–º–µ–Ω –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∑–∞–º–µ–Ω –ø–∞—Ä
            elif columns[2].text.strip() == '–ó–∞–º—ñ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ–π':
                if z_par:
                    txt_msg += '*–ó–∞–º—ñ–Ω–∏ –ø–∞—Ä:*\n' + z_par
                else:
                    txt_msg += '*–ó–∞–º—ñ–Ω –ø–∞—Ä –Ω–µ–º–∞—î*\n'
                par = False
                continue
        else:
            if columns[2].text.strip() == '':
                if z_aud:
                    txt_msg += '*–ó–∞–º—ñ–Ω–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ–π:*\n' + z_aud
                else:
                    txt_msg += '*–ó–∞–º—ñ–Ω –∞—É–¥–∏—Ç–æ—Ä—ñ–π –Ω–µ–º–∞—î*\n'
                break
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–º–µ–Ω–∞—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É
            elif str(message) in columns[0].text.strip() or \
                    str(message) in columns[2].text.strip():
                z_aud += f'{columns[0].text.strip()} –≥—Ä—É–ø–∞ ' \
                         f'{stick_num[columns[1].text.strip()]} –ø–∞—Ä–∞ ' \
                         f'{columns[2].text.strip()} –≤ ' \
                         f'*{columns[3].text.strip()}*'
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–º–µ–Ω–∞—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ –≤—Ç–æ—Ä–æ–º—É —Å—Ç–æ–ª–±—Ü—É
            elif str(message) in columns[4].text.strip() or \
                    str(message) in columns[6].text.strip():
                z_aud += f'{columns[4].text.strip()} –≥—Ä—É–ø–∞ ' \
                         f'{stick_num[columns[5].text.strip()]} –ø–∞—Ä–∞ ' \
                         f'{columns[6].text.strip()} –≤ ' \
                         f'*{columns[7].text.strip()}*'
    return txt_msg + '\n\n'
